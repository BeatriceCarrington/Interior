<?xml version="1.0" encoding="utf-8"?>
<FormData>
  <ContainerLabel />
  <FormDefinition value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xD;&#xA;&lt;cms:formdefinition xmlns=&quot;http://www.composite.net/ns/management/bindingforms/std.ui.controls.lib/1.0&quot; xmlns:f=&quot;http://www.composite.net/ns/management/bindingforms/std.function.lib/1.0&quot; xmlns:cms=&quot;http://www.composite.net/ns/management/bindingforms/1.0&quot;&gt;&#xD;&#xA;  &lt;cms:bindings&gt;&#xD;&#xA;    &lt;cms:binding name=&quot;FileContent&quot; type=&quot;System.String&quot; /&gt;&#xD;&#xA;    &lt;cms:binding name=&quot;FileName&quot; type=&quot;System.String&quot; /&gt;&#xD;&#xA;    &lt;cms:binding name=&quot;FileMimeType&quot; type=&quot;System.String&quot; /&gt;&#xD;&#xA;  &lt;/cms:bindings&gt;&#xD;&#xA;  &lt;cms:layout iconhandle=&quot;razor-function-edit&quot;&gt;&#xD;&#xA;    &lt;TextEditor&gt;&#xD;&#xA;      &lt;TextEditor.MimeType&gt;&#xD;&#xA;        &lt;cms:read source=&quot;FileMimeType&quot; /&gt;&#xD;&#xA;      &lt;/TextEditor.MimeType&gt;&#xD;&#xA;      &lt;TextEditor.Label&gt;&#xD;&#xA;        &lt;cms:read source=&quot;FileName&quot; /&gt;&#xD;&#xA;      &lt;/TextEditor.Label&gt;&#xD;&#xA;      &lt;cms:bind source=&quot;FileContent&quot; /&gt;&#xD;&#xA;    &lt;/TextEditor&gt;&#xD;&#xA;  &lt;/cms:layout&gt;&#xD;&#xA;&lt;/cms:formdefinition&gt;" />
  <CustomToolbarDefinition />
  <ContainerType>
    <SerializerHandler value="SerializerHandlerType='Composite\.C1Console\.Actions\.StandardUiContainerTypesSerializerHandler,Composite'SerializedObject='Document'" />
  </ContainerType>
  <Bindings>
    <Dictionary type="&lt;t n=&quot;System.Collections.Generic.Dictionary`2, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;&gt;&#xD;&#xA;  &lt;t n=&quot;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; /&gt;&#xD;&#xA;  &lt;t n=&quot;System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; /&gt;&#xD;&#xA;&lt;/t&gt;">
      <KeyPair>
        <Key>
          <Value type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" value="Title" />
        </Key>
        <Value>
          <Value type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" value="LanguageSwitcher.cshtml" />
        </Value>
      </KeyPair>
      <KeyPair>
        <Key>
          <Value type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" value="FileContent" />
        </Key>
        <Value>
          <Value type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" value="@inherits RazorFunction&#xA;&#xA;@using System.Globalization;&#xA;&#xA;@functions {&#xA;&#xA;    override public string FunctionDescription&#xA;    {&#xA;        get { return &quot;A function that displays a menu for switching between pages in multiple languages on localized websites.&quot;; }&#xA;    }&#xA;&#xA;&#x9;//// C1 Function parameters defined below...&#xA;&#x9;[FunctionParameter(Help = &quot;HomePages: always the link to the home page; TranslatedPages: only the link to the current page if translated; TranslatedOrHomePages:  the link to the translated page if it exists; otherwise, to the home page&quot;, &#xA;                       WidgetMarkup = &quot;&lt;f:widgetfunction xmlns:f='http://www.composite.net/ns/function/1.0' name='Composite.Widgets.String.Selector' label='' bindingsourcename=''&gt;&lt;f:helpdefinition helptext='' /&gt;&lt;f:param name='Options'&gt;&lt;f:function name='Composite.Utils.String.Split'&gt;&lt;f:param name='String' value='HomePages,TranslatedPages,TranslatedOrHomePages' /&gt;&lt;/f:function&gt;&lt;/f:param&gt;&lt;/f:widgetfunction&gt;&quot;)]&#xA;&#x9;public string Mode { get; set; }&#xA;&#xA;&#x9;[FunctionParameter(Label = &quot;Show Current&quot;, Help = &quot;Show the link to the current page (default)&quot;, DefaultValue = true)]&#xA;&#x9;public bool ShowCurrent { get; set; }&#xA;&#xA;&#x9;[FunctionParameter(Label = &quot;Navigation Id&quot;, Help = &quot;Attribute Id of DIV element&quot;, DefaultValue = &quot;LanguageSwitcher&quot;)]&#xA;&#x9;public string NavigationId { get; set; }&#xA;&#xA;&#x9;[FunctionParameter(Help = &quot;This text will be displayed next to the menu links if any exists (blank, by default)&quot;, DefaultValue = &quot; &quot;)]&#xA;&#x9;public string Description { get; set; }&#xA;&#xA;&#x9;[FunctionParameter(Label = &quot;Select Format&quot;, &#xA;                       DefaultValue = &quot;TwoLetterISOLanguageName&quot;, &#xA;                       WidgetMarkup = &quot;&lt;f:widgetfunction xmlns:f='http://www.composite.net/ns/function/1.0' name='Composite.Widgets.String.Selector' label='' bindingsourcename=''&gt;&lt;f:helpdefinition helptext='' /&gt;&lt;f:param name='Options'&gt;&lt;f:function name='Composite.Utils.String.Split'&gt;&lt;f:param name='String' value='DisplayName,EnglishName,Name,NativeName,ThreeLetterISOLanguageName,ThreeLetterWindowsLanguageName,TwoLetterISOLanguageName,Image,Empty' /&gt;&lt;/f:function&gt;&lt;/f:param&gt;&lt;/f:widgetfunction&gt;&quot;)]&#xA;&#x9;public string Format { get; set; }&#xA;&#xA;&#x9;[FunctionParameter(Label = &quot;Include query in URL&quot;, &#xA;                       Help = &quot;When true, path and query parts of the original URL will be included in the URL to other language versions. This is on by default.&quot;, &#xA;                       DefaultValue = true)]&#xA;&#x9;public bool IncludeQuery { get; set; }&#xA;&#xA;&#x9;public enum SwitcherMode&#xA;&#x9;{&#xA;&#x9;&#x9;HomePages,&#xA;&#x9;&#x9;TranslatedPages,&#xA;&#x9;&#x9;TranslatedOrHomePages&#xA;&#x9;}&#xA;&#x9;public enum SwitcherFormat&#xA;&#x9;{&#xA;&#x9;&#x9;DisplayName,&#xA;&#x9;&#x9;EnglishName,&#xA;&#x9;&#x9;Name,&#xA;&#x9;&#x9;NativeName,&#xA;&#x9;&#x9;ThreeLetterISOLanguageName,&#xA;&#x9;&#x9;ThreeLetterWindowsLanguageName,&#xA;&#x9;&#x9;TwoLetterISOLanguageName,&#xA;&#x9;&#x9;Image,&#xA;&#x9;&#x9;Empty&#xA;&#x9;}&#xA;}&#xA;@{&#xA;    var isLanguages = ShowCurrent || (!ShowCurrent &amp;&amp; DataLocalizationFacade.ActiveLocalizationCultures.Count() &gt; 1); &#xA;}&#xA;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&#xA;&lt;head&gt;&#xA;@if (isLanguages &amp;&amp; NavigationId == &quot;LanguageSwitcher&quot;)&#xA;{&#xA;    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;@Href(&quot;~/Frontend/Composite/Navigation/LanguageSwitcher&quot;)/Styles.css&quot; /&gt;&#xA;}&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;@if (isLanguages)&#xA;{&#xA;    &lt;ul id=&quot;@NavigationId&quot; class=&quot;nav&quot;&gt;&#xA;    @if (!string.IsNullOrWhiteSpace(Description))&#xA;    {&#xA;&#x9;    &lt;li class=&quot;description&quot;&gt;@Description&lt;/li&gt;&#xA;    }&#xA;    @{&#xA;        var currentHomeID = SitemapNavigator.CurrentHomePageId;&#xA;        var currentPageID = SitemapNavigator.CurrentPageId;&#xA;        var currentCulture = System.Threading.Thread.CurrentThread.CurrentCulture;&#xA;        SwitcherMode mode = (SwitcherMode)Enum.Parse(typeof(SwitcherMode), Mode);&#xA;       &#xA;        foreach (var culture in DataLocalizationFacade.ActiveLocalizationCultures)&#xA;        {&#xA;            if (ShowCurrent || (!ShowCurrent &amp;&amp; !culture.Equals(currentCulture)))&#xA;            {&#xA;                using (DataConnection conn = new DataConnection(culture))&#xA;                {&#xA;                    var homeNode = conn.SitemapNavigator.GetPageNodeById(currentHomeID);&#xA;                    var pageNode = conn.SitemapNavigator.GetPageNodeById(currentPageID);&#xA;                    var url = string.Empty;&#xA;&#xA;                    if (pageNode != null &amp;&amp; (mode == SwitcherMode.TranslatedPages || mode == SwitcherMode.TranslatedOrHomePages))&#xA;                    {&#xA;                         url = (IncludeQuery &amp;&amp; Request.QueryString.Count &gt; 0) ? string.Format(&quot;{0}{1}&quot;, pageNode.Url, Request.Url.Query) : pageNode.Url;&#xA;                    }&#xA;                    else if (homeNode != null &amp;&amp; (mode == SwitcherMode.HomePages || mode == SwitcherMode.TranslatedOrHomePages))&#xA;                    {&#xA;                        url = homeNode.Url;&#xA;                    }&#xA;                    if (!string.IsNullOrEmpty(url))&#xA;                    {&#xA;                        &lt;li&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;        @LinkElement(culture, url)&#xA;                        &lt;/li&gt;&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;      &#xA;    }&#xA;&lt;/ul&gt;&#xA;}&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;@helper LinkElement(CultureInfo c, string url)&#xA;{&#xA;&#x9;&lt;a href=&quot;@url&quot; class=&quot;@c.Name&quot; lang=&quot;@c.Name.Substring(0, c.Name.IndexOf(&quot;-&quot;))&quot;&gt;@CultureFormat(c)&lt;/a&gt;&#xA;}&#xA;@helper CultureFormat(CultureInfo c)&#xA;{&#xA;&#x9;SwitcherFormat format = (SwitcherFormat)Enum.Parse(typeof(SwitcherFormat), Format);&#xA;&#x9;switch (format)&#xA;&#x9;{&#xA;&#x9;&#x9;case SwitcherFormat.DisplayName:&#xA;&#x9;&#x9;&#x9;if ((c.CultureTypes &amp; CultureTypes.SpecificCultures) != 0)&#xA;&#x9;&#x9;&#x9;{&lt;text&gt;@c.Parent.DisplayName&lt;/text&gt;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&lt;text&gt;@c.DisplayName&lt;/text&gt;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case SwitcherFormat.EnglishName:&#xA;&#x9;&#x9;&#x9;if ((c.CultureTypes &amp; CultureTypes.SpecificCultures) != 0)&#xA;&#x9;&#x9;&#x9;{&lt;text&gt;@c.Parent.EnglishName&lt;/text&gt;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&lt;text&gt;@c.EnglishName&lt;/text&gt;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case SwitcherFormat.Name:&lt;text&gt;@c.Name&lt;/text&gt;break;&#xA;&#x9;&#x9;case SwitcherFormat.NativeName:&#xA;&#x9;&#x9;&#x9;if ((c.CultureTypes &amp; CultureTypes.SpecificCultures) != 0)&#xA;&#x9;&#x9;&#x9;{&lt;text&gt;@c.Parent.NativeName&lt;/text&gt;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&lt;text&gt;@c.NativeName&lt;/text&gt;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case SwitcherFormat.ThreeLetterISOLanguageName:&lt;text&gt;@c.ThreeLetterISOLanguageName&lt;/text&gt;; break;&#xA;&#x9;&#x9;case SwitcherFormat.ThreeLetterWindowsLanguageName:&lt;text&gt;@c.ThreeLetterWindowsLanguageName&lt;/text&gt;; break;&#xA;&#x9;&#x9;case SwitcherFormat.TwoLetterISOLanguageName:&lt;text&gt;@c.TwoLetterISOLanguageName&lt;/text&gt;; break;&#xA;&#x9;&#x9;case SwitcherFormat.Image:&lt;img src=&quot;@string.Format(&quot;/Frontend/Composite/Navigation/LanguageSwitcher/Images/{0}.png&quot;, c.Name)&quot; alt=&quot;@c.Name&quot; /&gt;break;&#xA;&#x9;&#x9;case SwitcherFormat.Empty:&#xA;&#x9;&#x9;default: break;&#xA;&#x9;}&#xA;}" />
        </Value>
      </KeyPair>
      <KeyPair>
        <Key>
          <Value type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" value="FileName" />
        </Key>
        <Value>
          <Value type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" value="LanguageSwitcher.cshtml" />
        </Value>
      </KeyPair>
      <KeyPair>
        <Key>
          <Value type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" value="FileMimeType" />
        </Key>
        <Value>
          <Value type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" value="application/x-cshtml" />
        </Value>
      </KeyPair>
    </Dictionary>
  </Bindings>
  <BindingsValidationRules>
    <Dictionary type="&lt;t n=&quot;System.Collections.Generic.Dictionary`2, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;&gt;&#xD;&#xA;  &lt;t n=&quot;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; /&gt;&#xD;&#xA;  &lt;t n=&quot;System.Collections.Generic.List`1, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;&gt;&#xD;&#xA;    &lt;t n=&quot;Composite.Data.Validation.ClientValidationRules.ClientValidationRule,Composite&quot; /&gt;&#xD;&#xA;  &lt;/t&gt;&#xD;&#xA;&lt;/t&gt;" />
  </BindingsValidationRules>
  <ExcludedEvents>
    <List type="&lt;t n=&quot;System.Collections.Generic.List`1, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;&gt;&#xD;&#xA;  &lt;t n=&quot;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; /&gt;&#xD;&#xA;&lt;/t&gt;" />
  </ExcludedEvents>
</FormData>